---
- name: Deploy a java web app
  hosts: localhost
  become: yes

  vars_prompt:
   - name: "rama"
     prompt: "Ingrese la rama a desplegar"
     private: no
     default: master

   - name: "version"
     prompt: "ingrese la version"
     private: no
     default: v_0

  vars:
   - repositorio: "https://github.com/abcnick/Prueba-pipeline.git"

   - proy_codigo: "/home/desarrollo1/ansible-proyecto/ansible-proyecto-codigo"

   - proy_codigo_compilado: "/home/desarrollo1/ansible-proyecto/ansible-proyecto-codigo/target"

   - proy_codigo_script: "/home/desarrollo1/ansible-proyecto/sonar.sh"

   - proy_contenedor: "6010381335d8:/opt/jboss/wildfly/standalone/deployments"

   - backup_prod: "/home/desarrollo1/ansible-proyecto/ansible-proyecto-backups/prod"
   
   - backup_dev: "/home/desarrollo1/ansible-proyecto/ansible-proyecto-backups/dev"

   - backup_qa: "/home/desarrollo1/ansible-proyecto/ansible-proyecto-backups/qa"

  tasks:
   - name: Fecha
     command: "date '+%Y-%m-%dT%H:%M:%S'"
     register: date_gmt
     environment:
       TZ: GMT+5

   - name: Clone Repo
     git:
       repo: "{{ repositorio }}"
       version: "{{ rama }}"
       dest: "{{ proy_codigo }}"
       key_file: /etc/ssh/accessazure
       accept_hostkey: yes

   - name: Last Commit
     command: git log -1
     register: infocommit
     args:
       chdir: "{{ proy_codigo }}"

   - name: Mensaje Commit
     debug: var=infocommit.stdout_lines

   - name: install nodejs prerequisites
     apt:
       name:
         - apt-transport-https
         - gcc
         - g++
         - make
       state: present


   - name: install nodejs
     apt:
       name:
         - nodejs
         - npm
         - build-essential
       state: present


   - name: Install Angular.js
     npm:
       name: angular
       global: yes
       state: present


   - name: validacion pruebas unitarias
     command: mvn clean test
     register: info
     args:
       chdir: "{{ proy_codigo }}"

   - name: datos pruebas unitarias
     debug: var=info.stdout

   - name: sonarq
     command: sh "{{ proy_codigo_script }}"
     args:
       chdir: "{{ proy_codigo }}"

   - name: Compila aplicacion
     command: mvn package
     args:
       chdir: "{{ proy_codigo }}"

   - name: renombrar archivo
     command: mv helloworld.war helloworld{{ version }}.war
     args:
       chdir: "{{ proy_codigo_compilado }}"

   - name: Deploy app
     command: docker cp helloworld{{ version }}.war "{{ proy_contenedor }}"
     args:
       chdir: "{{ proy_codigo_compilado }}"

   - name: Copiar carpeta prod
     when: rama == "master"
     command: cp helloworld{{ version }}.war "{{ backup_prod }}"
     args:
       chdir: "{{ proy_codigo_compilado }}"

   - name: Copiar carpeta dev
     when: rama == "develop"
     command: cp helloworld{{ version }}.war "{{ backup_dev }}"
     args:
       chdir: "{{ proy_codigo_compilado }}"

   - name: Copiar carpeta qa
     when: rama == "qa"
     command: cp helloworld{{ version }}.war "{{ backup_qa }}"
     args:
       chdir: "{{ proy_codigo_compilado }}"

   - name: Renombrar artefacto prod
     when: rama == "master"
     command: mv helloworld{{ version }}.war helloworld{{version}}-{{date_gmt.stdout}}.war
     args:
       chdir: "{{ backup_prod }}"

   - name: Renombrar artefacto dev
     when: rama == "develop"
     command: mv helloworld{{ version }}.war helloworld{{version}}-{{date_gmt.stdout}}.war
     args:
       chdir: "{{ backup_dev }}"

   - name: Renombrar artefacto qa
     when: rama == "qa"
     command: mv helloworld{{ version }}.war helloworld{{version}}-{{date_gmt.stdout}}.war
     args:
       chdir: "{{ backup_qa }}"
